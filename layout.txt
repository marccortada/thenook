  return (
    <div className="space-y-4">
      {/* Header Controls - Mobile Optimized */}
      <div className="space-y-3">
        {/* Date Navigation and Mode Toggle */}
        <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-3">
          <div className="flex items-center gap-2">
            <Button variant="outline" size="icon" onClick={goToPrevious}>
              <ChevronLeft className="h-4 w-4" />
            </Button>
            <Button variant="outline" size="icon" onClick={goToNext}>
              <ChevronRight className="h-4 w-4" />
            </Button>
            <Button variant="outline" size="sm" onClick={goToToday}>
              Hoy
            </Button>
          </div>
          
          <div className="text-lg sm:text-xl font-semibold text-center sm:text-left">
            {viewMode === 'day' 
              ? format(selectedDate, "EEEE, d 'de' MMMM yyyy", { locale: es })
              : `${format(getWeekDates()[0], "d MMM", { locale: es })} - ${format(getWeekDates()[6], "d MMM yyyy", { locale: es })}`
            }
          </div>
        </div>

        {/* Filters and Controls - Mobile Stack */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3">
          {/* Center Selection */}
          <div className="space-y-1">
            <label className="text-xs font-medium text-muted-foreground">Centro</label>
            <div className="space-y-2">
              {centers.map((center) => {
                const isSelected = selectedCenter === center.id;
                return (
                  <div
                    key={center.id}
                    onClick={() => {
                      console.log('üè¢ Center changed:', center.id);
                      setSelectedCenter(center.id);
                    }}
                    className={cn(
                      "flex items-center space-x-3 p-3 rounded-lg border cursor-pointer transition-all duration-200",
                      isSelected 
                        ? "bg-primary/10 border-primary text-primary" 
                        : "bg-background border-border hover:bg-accent/50"
                    )}
                  >
                    <MapPin className="h-4 w-4 flex-shrink-0" />
                    <div className="flex-1">
                      <p className="font-medium text-sm">{center.name}</p>
                    </div>
                    {isSelected && (
                      <div className="h-4 w-4 rounded-full bg-primary flex items-center justify-center">
                        <div className="h-2 w-2 rounded-full bg-white"></div>
                      </div>
                    )}
                  </div>
                );
              })}
            </div>

          
          {/* View Mode Toggle - Better Mobile Layout */}
          <div className="space-y-1">
            <label className="text-xs font-medium text-muted-foreground">Vista</label>
            <div className="flex gap-1">
              <Button
                variant={viewMode === 'day' ? 'default' : 'outline'}
                size="sm"
                className="flex-1"
                onClick={() => setViewMode('day')}
              >
                D√≠a
              </Button>
              <Button
                variant={viewMode === 'week' ? 'default' : 'outline'}
                size="sm"
                className="flex-1"
                onClick={() => setViewMode('week')}
              >
                Semana
              </Button>
            </div>
          </div>
        </div>
        
        {/* Blocking Mode Info */}
        {blockingMode && (
          <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
            <p className="text-sm text-blue-700">
              üìç Modo bloqueo activo: Haz clic en una franja para empezar, luego en otra para definir el rango.
            </p>
          </div>
        )}
      </div>

      {/* Calendar View */}
      {viewMode === 'day' ? renderDayView() : renderWeekView()}

